var _ = require('lodash');
var hb = require('handlebars');
var fs = require('fs');

module.exports = function(bosco) { 
    
    var createKey = require('./AssetHelper')(bosco).createKey;

    return {
        createAssetHtmlFiles:createAssetHtmlFiles,
        attachFormattedRepos: attachFormattedRepos
    }

    function createAssetHtmlFiles(staticAssets, next) {

        var htmlAssets = {},
            port = bosco.config.get('cdn:port') || "7334";

        _.forOwn(staticAssets, function(value, key) {

            var html,
                htmlFile = createKey(value.tag, value.type, 'html', 'html'),
                cdn = bosco.config.get('aws:cdn') ? bosco.config.get('aws:cdn') : 'http://localhost:' + port;

            if ((value.type == 'js' && value.extname == '.js') || value.type == 'css') {

                htmlAssets[htmlFile] = htmlAssets[htmlFile] || {
                    content: "<!-- Generated by Bosco -->\n",
                    type: "html",
                    assetType: value.type,
                    tag: value.tag,
                    extname: ".html"
                };

                if (value.type == 'js') {
                    htmlAssets[htmlFile].content += _.template('<script src="<%= url %>"></script>\n', {
                        'url': cdn + "/" + key
                    });
                } else {
                    htmlAssets[htmlFile].content += _.template('<link rel="stylesheet" href="<%=url %>" type="text/css" media="screen" />\n', {
                        'url': cdn + "/" + key
                    });
                }
            }

        });

        staticAssets = _.merge(htmlAssets, staticAssets);

        staticAssets.formattedAssets = formattedAssets(staticAssets);

        next(null, staticAssets);

    }

    function attachFormattedRepos(repos, next) {
        repos.formattedRepos = formattedRepos(repos);

        next(null, repos);
    }


    function formattedAssets(staticAssets) {
        
        var assets = {html: [], js: [], css: [], plain: []},
            templateContent = fs.readFileSync(__dirname + '/../templates/assetList.html'),
            template = hb.compile(templateContent.toString());

        _.map(staticAssets, function(asset, key) {
            assets[asset.type].push(key);           
        });

        assets.user = bosco.config.get('github:user');
        assets.date = (new Date()).toString();

        return template(assets);
        
    }

    function formattedRepos(repos) {
        
        var templateContent = fs.readFileSync(__dirname + '/../templates/repoList.html'),
            template = hb.compile(templateContent.toString()),
            templateData = { repos: repos };

        templateData.user = bosco.config.get('github:user');
        templateData.date = (new Date()).toString();

        return template(templateData);
        
    }
}